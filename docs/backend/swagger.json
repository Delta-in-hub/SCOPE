{
    "swagger": "2.0",
    "info": {
        "description": "Scope Center Backend API",
        "title": "Scope Center Backend API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "Delta",
            "url": "https://github.com/Delta-in-hub/ebpf-golang",
            "email": "DeltaMail@qq.com"
        },
        "version": "1.0"
    },
    "host": "127.0.0.1:18080",
    "paths": {
        "/api/v1/auth/login": {
            "post": {
                "description": "Authenticates a user and returns access and refresh tokens",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_backend.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_backend.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Login failed",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/logout": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Invalidates the user's refresh token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "User logout",
                "parameters": [
                    {
                        "description": "Refresh token",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_backend.LogoutRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid request body or empty refresh token",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Logout failed",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/refreshToken": {
            "post": {
                "description": "Uses a refresh token to generate a new access token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Refresh access token",
                "parameters": [
                    {
                        "description": "Refresh token",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_backend.RefreshTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_backend.RefreshTokenResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or empty refresh token",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Refresh token failed",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/register": {
            "post": {
                "description": "Registers a new user and returns user information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "User registration",
                "parameters": [
                    {
                        "description": "Registration information",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_backend.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/internal_backend.RegisterResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "Email already exists",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Registration failed",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/node/down": {
            "post": {
                "description": "Updates a node's status to offline",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "node"
                ],
                "summary": "Register node as offline",
                "parameters": [
                    {
                        "description": "Node information",
                        "name": "node",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/scope_internal_models.NodeInfo"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Invalid request body, incomplete node information, node doesn't exist, or token mismatch",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to update node",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/node/list": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns a list of all registered nodes",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "node"
                ],
                "summary": "Get all nodes",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/scope_internal_models.NodeInfo"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to get node list",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/node/up": {
            "post": {
                "description": "Updates a node's status to online and returns a token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "node"
                ],
                "summary": "Register node as online",
                "parameters": [
                    {
                        "description": "Node information",
                        "name": "node",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/scope_internal_models.NodeInfo"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body or incomplete node information",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to update node",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "internal_backend.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "internal_backend.LoginResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "expires_in": {
                    "type": "integer"
                },
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "internal_backend.LogoutRequest": {
            "type": "object",
            "properties": {
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "internal_backend.RefreshTokenRequest": {
            "type": "object",
            "properties": {
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "internal_backend.RefreshTokenResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "expires_in": {
                    "type": "integer"
                }
            }
        },
        "internal_backend.RegisterRequest": {
            "type": "object",
            "required": [
                "display_name",
                "email",
                "password"
            ],
            "properties": {
                "display_name": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "internal_backend.RegisterResponse": {
            "type": "object",
            "properties": {
                "display_name": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "scope_internal_models.NodeInfo": {
            "type": "object",
            "required": [
                "id",
                "ips",
                "status"
            ],
            "properties": {
                "id": {
                    "description": "Unique identifier for the agent (machine ID)",
                    "type": "string"
                },
                "ips": {
                    "description": "IP addresses of the agent (interface name -\u003e IP)",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "last_seen": {
                    "description": "Last time the agent was seen",
                    "type": "string"
                },
                "latency": {
                    "description": "Latency of the agent",
                    "allOf": [
                        {
                            "$ref": "#/definitions/time.Duration"
                        }
                    ]
                },
                "status": {
                    "description": "Status of the agent (online, offline)",
                    "type": "string"
                },
                "token": {
                    "description": "Authentication token",
                    "type": "string"
                }
            }
        },
        "time.Duration": {
            "type": "integer",
            "enum": [
                -9223372036854775808,
                9223372036854775807,
                1,
                1000,
                1000000,
                1000000000,
                60000000000,
                3600000000000,
                -9223372036854775808,
                9223372036854775807,
                1,
                1000,
                1000000,
                1000000000,
                60000000000,
                3600000000000
            ],
            "x-enum-varnames": [
                "minDuration",
                "maxDuration",
                "Nanosecond",
                "Microsecond",
                "Millisecond",
                "Second",
                "Minute",
                "Hour",
                "minDuration",
                "maxDuration",
                "Nanosecond",
                "Microsecond",
                "Millisecond",
                "Second",
                "Minute",
                "Hour"
            ]
        }
    }
}